mnet = moduleCreate('network', 'lib', 'us_', 'us_')

net_conn_type = mnet:newType('connection_type',true,true)
net_conn_type:memberAdd(bool,'IPv4',true,true)
net_conn_type:memberAdd(bool,'IPv6',true,true)

net_callback_dropped = mnet:newFunctionPointer('callback_dropped',bool)
net_callback_new_conn = mnet:newFunctionPointer('new_connection',bool)
net_callback_message = mnet:newFunctionPointer('message',bool)
net_callback_udp_message = mnet:newFunctionPointer('udp_message',bool)

net_connection = mnet:newType('connection',false,false)
net_connection:memberAdd(int,'fd')
net_connection:memberAdd(int,'port')
net_connection:memberAdd(net_callback_dropped,'dropped')
net_connection:memberAdd(net_callback_message,'message')
net_connection:memberAdd(bool,'us_connection')
net_connection:memberAdd(char,'breakchar')
net_connection:memberAdd(bool,'sending')
net_connection:memberAdd(bool,'receiving')
net_connection:memberAdd(bool,'encrypted')
net_connection:memberAdd(bool,'compressed')
net_connection:memberAdd(rc4,'send_key')
net_connection:memberAdd(rc4,'recv_key')
net_connection:memberAdd(pvoid,'priv')
net_connection:memberAdd(rc4,'send_key')
net_connection:memberAdd(net_conn_type,'conn_type')

net_connection_set = mnet:newType('connection_set',false,false)
net_connection_set:memberAdd(mnet:newBST(net_connection,'connection_set_bst',true),'receive',true,false)
-- net_connection_set:memberAdd(mnet:newHEAP(net_connection,'connection_set_heap'),false),'recvfrom',true,false)
net_connection_set:memberAdd(mnet:newConditional('my_cond'),'jobs_cond',true,false)
net_connection_set:memberAdd(thread,'receiver',true,false)
net_connection_set:memberAdd(newArray(thread),'receiving',true,false)
net_connection_set:memberAdd(bool,'updated')

net_listen = mnet:newType('listen',false,false)
net_listen:memberAdd(int,'fd')
net_listen:memberAdd(int,'port')
net_listen:memberAdd(net_callback_new_conn,'newconn')
net_listen:memberAdd(pvoid,'priv')
net_listen:memberAdd(bool,'us_connection')
net_listen:memberAdd(bool,'breakchar')
net_listen:memberAdd(net_conn_type,'conn_type')
net_listen:memberAdd(event_set,'es')
net_listen:memberAdd(net_callback_dropped,'dropped')
net_listen:memberAdd(net_callback_message,'message')

net_udp = mnet:newType('udp',false,false)
net_udp:memberAdd(int,'fd')
net_udp:memberAdd(int,'port')
net_udp:memberAdd(net_callback_udp_message,'message')
net_udp:memberAdd(pvoid,'priv')
net_udp:memberAdd(net_conn_type,'conn_type')
net_udp:memberAdd(event_set,'es')

net_message = mnet:newType('message',true,true)
net_message:memberAdd(net_connection,'connection')
net_message:memberAdd(bool,'compressed')
net_message:memberAdd(bool,'encrypted')
net_message:memberAdd(uint32,'ID')
net_message:memberAdd(sl,'data')

net_connection_drop = net_connection:functionCreate('drop', bool)

net_connection_send = net_connection:functionCreate('send', bool)
net_connection_send:paramAdd(sl, 'sl')
net_connection_send:paramAdd(uint32, 'type')

net_udp_sendto = net_connection:functionCreate('sendto',bool)
net_udp_sendto:paramAdd(sl, 'sl')

net_connection_recv = net_connection:functionCreate('recv', bool)

net_udp_recvfrom = net_udp:functionCreate('recvfrom', bool)

